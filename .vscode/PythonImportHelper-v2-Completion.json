[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "humanize",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "humanize",
        "description": "humanize",
        "detail": "humanize",
        "documentation": {}
    },
    {
        "label": "streamlit",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "streamlit",
        "description": "streamlit",
        "detail": "streamlit",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "GhostData.GhostData",
        "description": "GhostData.GhostData",
        "isExtraImport": true,
        "detail": "GhostData.GhostData",
        "documentation": {}
    },
    {
        "label": "SetPessoa",
        "importPath": "GhostData.GhostData",
        "description": "GhostData.GhostData",
        "isExtraImport": true,
        "detail": "GhostData.GhostData",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "Faker",
        "importPath": "faker",
        "description": "faker",
        "isExtraImport": true,
        "detail": "faker",
        "documentation": {}
    },
    {
        "label": "Faker",
        "importPath": "faker",
        "description": "faker",
        "isExtraImport": true,
        "detail": "faker",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "GhostData",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "GhostData",
        "description": "GhostData",
        "detail": "GhostData",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "glob",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "glob",
        "description": "glob",
        "detail": "glob",
        "documentation": {}
    },
    {
        "label": "shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil",
        "description": "shutil",
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "sysconfig",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sysconfig",
        "description": "sysconfig",
        "detail": "sysconfig",
        "documentation": {}
    },
    {
        "label": "tempfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tempfile",
        "description": "tempfile",
        "detail": "tempfile",
        "documentation": {}
    },
    {
        "label": "winreg",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "winreg",
        "description": "winreg",
        "detail": "winreg",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "find_packages",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "compactar",
        "kind": 2,
        "importPath": "src.app.app",
        "description": "src.app.app",
        "peekOfCode": "def compactar(numero):\n    # Usa o humanize para converter o n√∫mero em formato leg√≠vel\n    numero_formatado = humanize.intword(numero)\n    # Substitui os termos para o portugu√™s\n    numero_formatado = numero_formatado.replace(\"thousand\", \"mil\")\n    numero_formatado = numero_formatado.replace(\"million\", \"Mi\")\n    numero_formatado = numero_formatado.replace(\"billion\", \"Bi\")\n    numero_formatado = numero_formatado.replace(\"trillion\", \"Tri\")\n    return numero_formatado\nst.header(\"üëªüìä GhostData Datasets Aleat√≥rios\",divider='violet')",
        "detail": "src.app.app",
        "documentation": {}
    },
    {
        "label": "load_data",
        "kind": 2,
        "importPath": "src.app.app",
        "description": "src.app.app",
        "peekOfCode": "def load_data(data,num):\n    df = gerar_dataset(data,num)\n    return df\nst.sidebar.header(\"‚öôÔ∏è Configura√ß√µes\", divider=\"violet\")\n# üìå Se√ß√£o: Defini√ß√£o do N√∫mero de Registros\nst.sidebar.subheader(\"üìä Defini√ß√£o de Registros\", divider=\"blue\")\nnum = st.sidebar.number_input(\"Quantidade de registros:\", step=1, min_value=1, max_value=500000)\nst.sidebar.write(f\"üìå Sua base ter√° **{compactar(num)}** registros.\")\n# üìå Se√ß√£o: Escolha do Tema do Dataset\nst.sidebar.subheader(\"üìå Escolha um Tema\", divider=\"green\")",
        "detail": "src.app.app",
        "documentation": {}
    },
    {
        "label": "num",
        "kind": 5,
        "importPath": "src.app.app",
        "description": "src.app.app",
        "peekOfCode": "num = st.sidebar.number_input(\"Quantidade de registros:\", step=1, min_value=1, max_value=500000)\nst.sidebar.write(f\"üìå Sua base ter√° **{compactar(num)}** registros.\")\n# üìå Se√ß√£o: Escolha do Tema do Dataset\nst.sidebar.subheader(\"üìå Escolha um Tema\", divider=\"green\")\noption_map = {\n    0: \"üë§ Pessoas\",\n    1: \"üíº Funcion√°rios\",\n    2: \"üì¶ Produtos\",\n    3: \"üè¨ Lojas\",\n    4: \"üõí Vendas\",",
        "detail": "src.app.app",
        "documentation": {}
    },
    {
        "label": "option_map",
        "kind": 5,
        "importPath": "src.app.app",
        "description": "src.app.app",
        "peekOfCode": "option_map = {\n    0: \"üë§ Pessoas\",\n    1: \"üíº Funcion√°rios\",\n    2: \"üì¶ Produtos\",\n    3: \"üè¨ Lojas\",\n    4: \"üõí Vendas\",\n}\nselection = st.sidebar.pills(\n    \"Escolha um tema\",\n    options=option_map.keys(),",
        "detail": "src.app.app",
        "documentation": {}
    },
    {
        "label": "selection",
        "kind": 5,
        "importPath": "src.app.app",
        "description": "src.app.app",
        "peekOfCode": "selection = st.sidebar.pills(\n    \"Escolha um tema\",\n    options=option_map.keys(),\n    format_func=lambda option: option_map[option],\n    selection_mode=\"single\"\n)\n# üîÑ Mapeamento de escolha e t√≠tulo correspondente\nmatch selection:\n    case 0:\n        escolha = SetPessoa",
        "detail": "src.app.app",
        "documentation": {}
    },
    {
        "label": "botao",
        "kind": 5,
        "importPath": "src.app.app",
        "description": "src.app.app",
        "peekOfCode": "botao = st.sidebar.button(\"Gerar Dataset\", type=\"primary\")\n# üì¶ Processamento e Exibi√ß√£o dos Dados\nif botao:\n    if escolha:\n        with st.spinner(\"‚è≥ Gerando dados...\"):\n            titulo_completo = f\"{titulo} **com** {compactar(num)} **Registros**\"\n            if escolha == \"vendas\":  \n                df_produtos, df_estabelecimentos, df_vendas = gerar_vendas(num) \n                st.subheader(titulo_completo, divider=\"grey\")\n                st.subheader(\"üì¶ Produtos\", divider=\"grey\")",
        "detail": "src.app.app",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "src.app.teste",
        "description": "src.app.teste",
        "peekOfCode": "a = SetPessoa()\nprint(a.get_data())",
        "detail": "src.app.teste",
        "documentation": {}
    },
    {
        "label": "'''departamentos",
        "kind": 5,
        "importPath": "src.GhostData.data",
        "description": "src.GhostData.data",
        "peekOfCode": "'''departamentos = {\n    \"TI\": {\n        \"Desenvolvedor\": [\"Estagi√°rio\", \"J√∫nior\", \"Pleno\", \"S√™nior\", \"Coordenador\", \"Gerente\", \"Diretor\"],\n        \"Analista de Dados\": [\"Estagi√°rio\", \"J√∫nior\", \"Pleno\", \"S√™nior\", \"Coordenador\", \"Gerente\", \"Diretor\"],\n        \"Engenheiro de Software\": [\"Estagi√°rio\", \"J√∫nior\", \"Pleno\", \"S√™nior\", \"Coordenador\", \"Gerente\", \"Diretor\"],\n        \"Administrador de Sistemas\": [\"J√∫nior\", \"Pleno\", \"S√™nior\", \"Coordenador\", \"Gerente\", \"Diretor\"],\n        \"Arquiteto de Solu√ß√µes\": [\"Pleno\", \"S√™nior\", \"Coordenador\", \"Gerente\", \"Diretor\"],\n        \"Cientista de Dados\": [\"Estagi√°rio\", \"J√∫nior\", \"Pleno\", \"S√™nior\", \"Coordenador\", \"Gerente\", \"Diretor\"],\n        \"Suporte T√©cnico\": [\"Estagi√°rio\", \"J√∫nior\", \"Pleno\", \"S√™nior\", \"Coordenador\", \"Gerente\"],\n        \"Especialista em Seguran√ßa da Informa√ß√£o\": [\"J√∫nior\", \"Pleno\", \"S√™nior\", \"Coordenador\", \"Gerente\", \"Diretor\"],",
        "detail": "src.GhostData.data",
        "documentation": {}
    },
    {
        "label": "faixa_salarial",
        "kind": 5,
        "importPath": "src.GhostData.data",
        "description": "src.GhostData.data",
        "peekOfCode": "faixa_salarial = {\n        'Estagi√°rio': (1000, 2000),\n        'J√∫nior': (2000, 4000),\n        'Pleno': (4000, 8000),\n        'S√™nior': (8000, 15000),\n        'Coordenador': (10000, 18000),\n        'Gerente': (15000, 25000),\n        'Diretor': (25000, 50000)\n    }'''\ncategorias_com_detalhes = {",
        "detail": "src.GhostData.data",
        "documentation": {}
    },
    {
        "label": "categorias_com_detalhes",
        "kind": 5,
        "importPath": "src.GhostData.data",
        "description": "src.GhostData.data",
        "peekOfCode": "categorias_com_detalhes = {\n    \"Eletr√¥nicos\": {\n        \"Smartphone\": {\"preco\": 1200, \"id\": \"eletr-001\"},\n        \"Notebook\": {\"preco\": 2500, \"id\": \"eletr-002\"},\n        \"Tablet\": {\"preco\": 800, \"id\": \"eletr-003\"},\n        \"Fone de Ouvido\": {\"preco\": 150, \"id\": \"eletr-004\"},\n        \"Smartwatch\": {\"preco\": 600, \"id\": \"eletr-005\"},\n        \"C√¢mera Digital\": {\"preco\": 900, \"id\": \"eletr-006\"},\n        \"Impressora\": {\"preco\": 400, \"id\": \"eletr-007\"},\n        \"Monitor\": {\"preco\": 500, \"id\": \"eletr-008\"},",
        "detail": "src.GhostData.data",
        "documentation": {}
    },
    {
        "label": "SetPessoa",
        "kind": 6,
        "importPath": "src.GhostData.GhostData",
        "description": "src.GhostData.GhostData",
        "peekOfCode": "class SetPessoa:\n    def __init__(self):\n        self.fake = Faker('pt-BR')\n        self.name = self.fake.first_name()  # Nome pr√≥prio\n        self.last_name = self.fake.last_name()  # Sobrenome\n        self.phone_number = self.fake.phone_number()  # N√∫mero de telefone\n        self.state = self.fake.state()  # Estado\n        self.city = self.fake.city()  # Cidade \n        self.birth = self.fake.date_of_birth(minimum_age=18, maximum_age=80)\n        self.age = self.calculate_age()",
        "detail": "src.GhostData.GhostData",
        "documentation": {}
    },
    {
        "label": "SetFuncionario",
        "kind": 6,
        "importPath": "src.GhostData.GhostData",
        "description": "src.GhostData.GhostData",
        "peekOfCode": "class SetFuncionario(SetPessoa):\n    departamentos = {\n    \"TI\": {\n        \"Desenvolvedor\": [\"Estagi√°rio\", \"J√∫nior\", \"Pleno\", \"S√™nior\", \"Coordenador\", \"Gerente\", \"Diretor\"],\n        \"Analista de Dados\": [\"Estagi√°rio\", \"J√∫nior\", \"Pleno\", \"S√™nior\", \"Coordenador\", \"Gerente\", \"Diretor\"],\n        \"Engenheiro de Software\": [\"Estagi√°rio\", \"J√∫nior\", \"Pleno\", \"S√™nior\", \"Coordenador\", \"Gerente\", \"Diretor\"],\n        \"Administrador de Sistemas\": [\"J√∫nior\", \"Pleno\", \"S√™nior\", \"Coordenador\", \"Gerente\", \"Diretor\"],\n        \"Arquiteto de Solu√ß√µes\": [\"Pleno\", \"S√™nior\", \"Coordenador\", \"Gerente\", \"Diretor\"],\n        \"Cientista de Dados\": [\"Estagi√°rio\", \"J√∫nior\", \"Pleno\", \"S√™nior\", \"Coordenador\", \"Gerente\", \"Diretor\"],\n        \"Suporte T√©cnico\": [\"Estagi√°rio\", \"J√∫nior\", \"Pleno\", \"S√™nior\", \"Coordenador\", \"Gerente\"],",
        "detail": "src.GhostData.GhostData",
        "documentation": {}
    },
    {
        "label": "SetEstabelecimento",
        "kind": 6,
        "importPath": "src.GhostData.GhostData",
        "description": "src.GhostData.GhostData",
        "peekOfCode": "class SetEstabelecimento:\n    domains = ['gmail.com', 'outlook.com', 'hotmail.com']\n    def __init__(self):\n        self.fake = Faker('pt-BR')\n        self.id_estabelecimento = str(uuid.uuid4())[:8]  # Simula um ID √∫nico\n        self.nome = f\"{self.fake.company_suffix()} {self.fake.company()}\"\n        self.cnpj = self.gerar_cnpj()\n        self.telefone = self.fake.phone_number()\n        self.email = self.gerar_email()\n        self.endereco = self.fake.street_address()",
        "detail": "src.GhostData.GhostData",
        "documentation": {}
    },
    {
        "label": "SetProduto",
        "kind": 6,
        "importPath": "src.GhostData.GhostData",
        "description": "src.GhostData.GhostData",
        "peekOfCode": "class SetProduto:\n    produtos = {\"Eletr√¥nicos\": {\n        \"Smartphone\": {\"preco\": 1200, \"id\": \"eletr-001\"},\n        \"Notebook\": {\"preco\": 2500, \"id\": \"eletr-002\"},\n        \"Tablet\": {\"preco\": 800, \"id\": \"eletr-003\"},\n        \"Fone de Ouvido\": {\"preco\": 150, \"id\": \"eletr-004\"},\n        \"Smartwatch\": {\"preco\": 600, \"id\": \"eletr-005\"},\n        \"C√¢mera Digital\": {\"preco\": 900, \"id\": \"eletr-006\"},\n        \"Impressora\": {\"preco\": 400, \"id\": \"eletr-007\"},\n        \"Monitor\": {\"preco\": 500, \"id\": \"eletr-008\"},",
        "detail": "src.GhostData.GhostData",
        "documentation": {}
    },
    {
        "label": "gerar_vendas",
        "kind": 2,
        "importPath": "src.GhostData.GhostData",
        "description": "src.GhostData.GhostData",
        "peekOfCode": "def gerar_vendas(numero_de_registros):\n    produtos = []\n    estabelecimentos = []\n    vendas = []\n    for _ in range(numero_de_registros):\n        # Criar Produto e Estabelecimento\n        produto = SetProduto()\n        estabelecimento = SetEstabelecimento()\n        # Armazenar nos DataFrames\n        produtos.append(produto.get_data())",
        "detail": "src.GhostData.GhostData",
        "documentation": {}
    },
    {
        "label": "gerar_dataset",
        "kind": 2,
        "importPath": "src.GhostData.GhostData",
        "description": "src.GhostData.GhostData",
        "peekOfCode": "def gerar_dataset(classe, num_registros):\n    dados = []\n    for _ in range(num_registros):\n        obj = classe()  \n        dados.append(obj.get_data()) \n    df = pd.DataFrame(dados)\n    return df",
        "detail": "src.GhostData.GhostData",
        "documentation": {}
    },
    {
        "label": "SetProduto",
        "kind": 6,
        "importPath": "src.GhostData.teste",
        "description": "src.GhostData.teste",
        "peekOfCode": "class SetProduto:\n    def __init__(self):\n        self.produtos_disponiveis = self.carregar_produtos_do_json(\"..\\Data\\produtos.json\")  # Carrega os produtos do arquivo JSON\n        self.categoria, self.nome, self.id_produto, self.preco = self.gerar_produto()\n    def carregar_produtos_do_json(self, caminho_relativo):\n        try:\n            # Constr√≥i o caminho absoluto correto\n            caminho_absoluto = os.path.join(os.path.dirname(os.path.abspath(__file__)), caminho_relativo)\n            with open(caminho_absoluto, 'r', encoding='utf-8') as arquivo:\n                dados = json.load(arquivo)",
        "detail": "src.GhostData.teste",
        "documentation": {}
    },
    {
        "label": "carregar_produtos_do_json",
        "kind": 2,
        "importPath": "src.GhostData.teste",
        "description": "src.GhostData.teste",
        "peekOfCode": "def carregar_produtos_do_json(caminho_relativo):\n    try:\n        # Constr√≥i o caminho absoluto correto\n        caminho_absoluto = os.path.join(os.path.dirname(os.path.abspath(__file__)), caminho_relativo)\n        with open(caminho_absoluto, 'r', encoding='utf-8') as arquivo:\n            dados = json.load(arquivo)\n        return dados\n    except FileNotFoundError:\n        print(f\"Erro: Arquivo '{caminho_relativo}' n√£o encontrado.\")\n        return None",
        "detail": "src.GhostData.teste",
        "documentation": {}
    },
    {
        "label": "produto",
        "kind": 5,
        "importPath": "src.GhostData.teste",
        "description": "src.GhostData.teste",
        "peekOfCode": "produto = SetProduto()\nprint(produto.get_data())",
        "detail": "src.GhostData.teste",
        "documentation": {}
    },
    {
        "label": "Tee",
        "kind": 6,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "class Tee:\n    def __init__(self, file):\n        self.f = file\n    def write(self, what):\n        if self.f is not None:\n            try:\n                self.f.write(what.replace(\"\\n\", \"\\r\\n\"))\n            except OSError:\n                pass\n        tee_f.write(what)",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "get_root_hkey",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def get_root_hkey():\n    try:\n        winreg.OpenKey(\n            winreg.HKEY_LOCAL_MACHINE, root_key_name, 0, winreg.KEY_CREATE_SUB_KEY\n        )\n        return winreg.HKEY_LOCAL_MACHINE\n    except OSError:\n        # Either not exist, or no permissions to create subkey means\n        # must be HKCU\n        return winreg.HKEY_CURRENT_USER",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "create_shortcut",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def create_shortcut(\n    path, description, filename, arguments=\"\", workdir=\"\", iconpath=\"\", iconindex=0\n):\n    import pythoncom\n    from win32com.shell import shell\n    ilink = pythoncom.CoCreateInstance(\n        shell.CLSID_ShellLink,\n        None,\n        pythoncom.CLSCTX_INPROC_SERVER,\n        shell.IID_IShellLink,",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "get_special_folder_path",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def get_special_folder_path(path_name):\n    from win32com.shell import shell, shellcon\n    for maybe in \"\"\"\n        CSIDL_COMMON_STARTMENU CSIDL_STARTMENU CSIDL_COMMON_APPDATA\n        CSIDL_LOCAL_APPDATA CSIDL_APPDATA CSIDL_COMMON_DESKTOPDIRECTORY\n        CSIDL_DESKTOPDIRECTORY CSIDL_COMMON_STARTUP CSIDL_STARTUP\n        CSIDL_COMMON_PROGRAMS CSIDL_PROGRAMS CSIDL_PROGRAM_FILES_COMMON\n        CSIDL_PROGRAM_FILES CSIDL_FONTS\"\"\".split():\n        if maybe == path_name:\n            csidl = getattr(shellcon, maybe)",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "CopyTo",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def CopyTo(desc, src, dest):\n    import win32api\n    import win32con\n    while 1:\n        try:\n            win32api.CopyFile(src, dest, 0)\n            return\n        except win32api.error as details:\n            if details.winerror == 5:  # access denied - user not admin.\n                raise",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "LoadSystemModule",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def LoadSystemModule(lib_dir, modname):\n    # See if this is a debug build.\n    import importlib.machinery\n    import importlib.util\n    suffix = \"_d\" if \"_d.pyd\" in importlib.machinery.EXTENSION_SUFFIXES else \"\"\n    filename = \"%s%d%d%s.dll\" % (\n        modname,\n        sys.version_info.major,\n        sys.version_info.minor,\n        suffix,",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "SetPyKeyVal",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def SetPyKeyVal(key_name, value_name, value):\n    root_hkey = get_root_hkey()\n    root_key = winreg.OpenKey(root_hkey, root_key_name)\n    try:\n        my_key = winreg.CreateKey(root_key, key_name)\n        try:\n            winreg.SetValueEx(my_key, value_name, 0, winreg.REG_SZ, value)\n            if verbose:\n                print(f\"-> {root_key_name}\\\\{key_name}[{value_name}]={value!r}\")\n        finally:",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "UnsetPyKeyVal",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def UnsetPyKeyVal(key_name, value_name, delete_key=False):\n    root_hkey = get_root_hkey()\n    root_key = winreg.OpenKey(root_hkey, root_key_name)\n    try:\n        my_key = winreg.OpenKey(root_key, key_name, 0, winreg.KEY_SET_VALUE)\n        try:\n            winreg.DeleteValue(my_key, value_name)\n            if verbose:\n                print(f\"-> DELETE {root_key_name}\\\\{key_name}[{value_name}]\")\n        finally:",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "RegisterCOMObjects",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def RegisterCOMObjects(register=True):\n    import win32com.server.register\n    if register:\n        func = win32com.server.register.RegisterClasses\n    else:\n        func = win32com.server.register.UnregisterClasses\n    flags = {}\n    if not verbose:\n        flags[\"quiet\"] = 1\n    for module, klass_name in com_modules:",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "RegisterHelpFile",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def RegisterHelpFile(register=True, lib_dir=None):\n    if lib_dir is None:\n        lib_dir = sysconfig.get_paths()[\"platlib\"]\n    if register:\n        # Register the .chm help file.\n        chm_file = os.path.join(lib_dir, \"PyWin32.chm\")\n        if os.path.isfile(chm_file):\n            # This isn't recursive, so if 'Help' doesn't exist, we croak\n            SetPyKeyVal(\"Help\", None, None)\n            SetPyKeyVal(\"Help\\\\Pythonwin Reference\", None, chm_file)",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "RegisterPythonwin",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def RegisterPythonwin(register=True, lib_dir=None):\n    \"\"\"Add (or remove) Pythonwin to context menu for python scripts.\n    ??? Should probably also add Edit command for pys files also.\n    Also need to remove these keys on uninstall, but there's no function\n    to add registry entries to uninstall log ???\n    \"\"\"\n    import os\n    if lib_dir is None:\n        lib_dir = sysconfig.get_paths()[\"platlib\"]\n    classes_root = get_root_hkey()",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "get_shortcuts_folder",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def get_shortcuts_folder():\n    if get_root_hkey() == winreg.HKEY_LOCAL_MACHINE:\n        try:\n            fldr = get_special_folder_path(\"CSIDL_COMMON_PROGRAMS\")\n        except OSError:\n            # No CSIDL_COMMON_PROGRAMS on this platform\n            fldr = get_special_folder_path(\"CSIDL_PROGRAMS\")\n    else:\n        # non-admin install - always goes in this user's start menu.\n        fldr = get_special_folder_path(\"CSIDL_PROGRAMS\")",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "get_system_dir",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def get_system_dir():\n    import win32api  # we assume this exists.\n    try:\n        import pythoncom\n        import win32process\n        from win32com.shell import shell, shellcon\n        try:\n            if win32process.IsWow64Process():\n                return shell.SHGetSpecialFolderPath(0, shellcon.CSIDL_SYSTEMX86)\n            return shell.SHGetSpecialFolderPath(0, shellcon.CSIDL_SYSTEM)",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "fixup_dbi",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def fixup_dbi():\n    # We used to have a dbi.pyd with our .pyd files, but now have a .py file.\n    # If the user didn't uninstall, they will find the .pyd which will cause\n    # problems - so handle that.\n    import win32api\n    import win32con\n    pyd_name = os.path.join(os.path.dirname(win32api.__file__), \"dbi.pyd\")\n    pyd_d_name = os.path.join(os.path.dirname(win32api.__file__), \"dbi_d.pyd\")\n    py_name = os.path.join(os.path.dirname(win32con.__file__), \"dbi.py\")\n    for this_pyd in (pyd_name, pyd_d_name):",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "install",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def install(lib_dir):\n    import traceback\n    # The .pth file is now installed as a regular file.\n    # Create the .pth file in the site-packages dir, and use only relative paths\n    # We used to write a .pth directly to sys.prefix - clobber it.\n    if os.path.isfile(os.path.join(sys.prefix, \"pywin32.pth\")):\n        os.unlink(os.path.join(sys.prefix, \"pywin32.pth\"))\n    # The .pth may be new and therefore not loaded in this session.\n    # Setup the paths just in case.\n    for name in \"win32 win32\\\\lib Pythonwin\".split():",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "uninstall",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def uninstall(lib_dir):\n    # First ensure our system modules are loaded from pywin32_system, so\n    # we can remove the ones we copied...\n    LoadSystemModule(lib_dir, \"pywintypes\")\n    LoadSystemModule(lib_dir, \"pythoncom\")\n    try:\n        RegisterCOMObjects(False)\n    except Exception as why:\n        print(f\"Failed to unregister COM objects: {why}\")\n    try:",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "verify_destination",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def verify_destination(location: str) -> str:\n    location = os.path.abspath(location)\n    if not os.path.isdir(location):\n        raise argparse.ArgumentTypeError(\n            f'Path \"{location}\" is not an existing directory!'\n        )\n    return location\ndef main():\n    parser = argparse.ArgumentParser(\n        formatter_class=argparse.RawDescriptionHelpFormatter,",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def main():\n    parser = argparse.ArgumentParser(\n        formatter_class=argparse.RawDescriptionHelpFormatter,\n        description=\"\"\"A post-install script for the pywin32 extensions.\n    * Typical usage:\n    > python -m pywin32_postinstall -install\n    * or (shorter but you don't have control over which python environment is used)\n    > pywin32_postinstall -install\n    You need to execute this script, with a '-install' parameter,\n    to ensure the environment is setup correctly to install COM objects, services, etc.",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "tee_f",
        "kind": 5,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "tee_f = open(\n    os.path.join(\n        tempfile.gettempdir(),  # Send output somewhere so it can be found if necessary...\n        \"pywin32_postinstall.log\",\n    ),\n    \"w\",\n)\nclass Tee:\n    def __init__(self, file):\n        self.f = file",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "sys.stderr",
        "kind": 5,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "sys.stderr = Tee(sys.stderr)\nsys.stdout = Tee(sys.stdout)\ncom_modules = [\n    # module_name,                      class_names\n    (\"win32com.servers.interp\", \"Interpreter\"),\n    (\"win32com.servers.dictionary\", \"DictionaryPolicy\"),\n    (\"win32com.axscript.client.pyscript\", \"PyScript\"),\n]\n# Is this a 'silent' install - ie, avoid all dialogs.\n# Different than 'verbose'",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "sys.stdout",
        "kind": 5,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "sys.stdout = Tee(sys.stdout)\ncom_modules = [\n    # module_name,                      class_names\n    (\"win32com.servers.interp\", \"Interpreter\"),\n    (\"win32com.servers.dictionary\", \"DictionaryPolicy\"),\n    (\"win32com.axscript.client.pyscript\", \"PyScript\"),\n]\n# Is this a 'silent' install - ie, avoid all dialogs.\n# Different than 'verbose'\nsilent = 0",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "com_modules",
        "kind": 5,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "com_modules = [\n    # module_name,                      class_names\n    (\"win32com.servers.interp\", \"Interpreter\"),\n    (\"win32com.servers.dictionary\", \"DictionaryPolicy\"),\n    (\"win32com.axscript.client.pyscript\", \"PyScript\"),\n]\n# Is this a 'silent' install - ie, avoid all dialogs.\n# Different than 'verbose'\nsilent = 0\n# Verbosity of output messages.",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "silent",
        "kind": 5,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "silent = 0\n# Verbosity of output messages.\nverbose = 1\nroot_key_name = \"Software\\\\Python\\\\PythonCore\\\\\" + sys.winver\ndef get_root_hkey():\n    try:\n        winreg.OpenKey(\n            winreg.HKEY_LOCAL_MACHINE, root_key_name, 0, winreg.KEY_CREATE_SUB_KEY\n        )\n        return winreg.HKEY_LOCAL_MACHINE",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "verbose",
        "kind": 5,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "verbose = 1\nroot_key_name = \"Software\\\\Python\\\\PythonCore\\\\\" + sys.winver\ndef get_root_hkey():\n    try:\n        winreg.OpenKey(\n            winreg.HKEY_LOCAL_MACHINE, root_key_name, 0, winreg.KEY_CREATE_SUB_KEY\n        )\n        return winreg.HKEY_LOCAL_MACHINE\n    except OSError:\n        # Either not exist, or no permissions to create subkey means",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "root_key_name",
        "kind": 5,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "root_key_name = \"Software\\\\Python\\\\PythonCore\\\\\" + sys.winver\ndef get_root_hkey():\n    try:\n        winreg.OpenKey(\n            winreg.HKEY_LOCAL_MACHINE, root_key_name, 0, winreg.KEY_CREATE_SUB_KEY\n        )\n        return winreg.HKEY_LOCAL_MACHINE\n    except OSError:\n        # Either not exist, or no permissions to create subkey means\n        # must be HKCU",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "run_test",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_testall",
        "description": "venv.Scripts.pywin32_testall",
        "peekOfCode": "def run_test(script, cmdline_extras):\n    dirname, scriptname = os.path.split(script)\n    # some tests prefer to be run from their directory.\n    cmd = [sys.executable, \"-u\", scriptname] + cmdline_extras\n    print(\"--- Running '%s' ---\" % script)\n    sys.stdout.flush()\n    result = subprocess.run(cmd, check=False, cwd=dirname)\n    print(f\"*** Test script '{script}' exited with {result.returncode}\")\n    sys.stdout.flush()\n    if result.returncode:",
        "detail": "venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "find_and_run",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_testall",
        "description": "venv.Scripts.pywin32_testall",
        "peekOfCode": "def find_and_run(possible_locations, extras):\n    for maybe in possible_locations:\n        if os.path.isfile(maybe):\n            run_test(maybe, extras)\n            break\n    else:\n        raise RuntimeError(\n            \"Failed to locate a test script in one of %s\" % possible_locations\n        )\ndef main():",
        "detail": "venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_testall",
        "description": "venv.Scripts.pywin32_testall",
        "peekOfCode": "def main():\n    import argparse\n    code_directories = [project_root] + site_packages\n    parser = argparse.ArgumentParser(\n        description=\"A script to trigger tests in all subprojects of PyWin32.\"\n    )\n    parser.add_argument(\n        \"-no-user-interaction\",\n        default=False,\n        action=\"store_true\",",
        "detail": "venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "project_root",
        "kind": 5,
        "importPath": "venv.Scripts.pywin32_testall",
        "description": "venv.Scripts.pywin32_testall",
        "peekOfCode": "project_root = os.path.dirname(os.path.dirname(os.path.dirname(__file__)))\nsite_packages = [site.getusersitepackages()] + site.getsitepackages()\nfailures = []\n# Run a test using subprocess and wait for the result.\n# If we get an returncode != 0, we know that there was an error, but we don't\n# abort immediately - we run as many tests as we can.\ndef run_test(script, cmdline_extras):\n    dirname, scriptname = os.path.split(script)\n    # some tests prefer to be run from their directory.\n    cmd = [sys.executable, \"-u\", scriptname] + cmdline_extras",
        "detail": "venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "site_packages",
        "kind": 5,
        "importPath": "venv.Scripts.pywin32_testall",
        "description": "venv.Scripts.pywin32_testall",
        "peekOfCode": "site_packages = [site.getusersitepackages()] + site.getsitepackages()\nfailures = []\n# Run a test using subprocess and wait for the result.\n# If we get an returncode != 0, we know that there was an error, but we don't\n# abort immediately - we run as many tests as we can.\ndef run_test(script, cmdline_extras):\n    dirname, scriptname = os.path.split(script)\n    # some tests prefer to be run from their directory.\n    cmd = [sys.executable, \"-u\", scriptname] + cmdline_extras\n    print(\"--- Running '%s' ---\" % script)",
        "detail": "venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "failures",
        "kind": 5,
        "importPath": "venv.Scripts.pywin32_testall",
        "description": "venv.Scripts.pywin32_testall",
        "peekOfCode": "failures = []\n# Run a test using subprocess and wait for the result.\n# If we get an returncode != 0, we know that there was an error, but we don't\n# abort immediately - we run as many tests as we can.\ndef run_test(script, cmdline_extras):\n    dirname, scriptname = os.path.split(script)\n    # some tests prefer to be run from their directory.\n    cmd = [sys.executable, \"-u\", scriptname] + cmdline_extras\n    print(\"--- Running '%s' ---\" % script)\n    sys.stdout.flush()",
        "detail": "venv.Scripts.pywin32_testall",
        "documentation": {}
    }
]